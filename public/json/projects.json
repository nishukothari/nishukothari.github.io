{
    "projArray" : [
        {
            "name": "Amazon Alexa Video Calling Optimization",
            "key": "aa",
            "category": "Professional",
            "tags": ["Featured", "Frontend", "Backend", "Video Processing"],
            "languages": ["Java", "Typescript"],
            "description": "Designed an optimization for Amazon Cloud based video calls between Alexa devices to address lag caused by the server side compositing of video streams. Implemented this optimization end-to-end using Typescript on the server side and Java/Android Studio on the device side."
        },
        {
            "name": "Assembler, Linker, Simulator",
            "key": "al",
            "category": "School",
            "tags": ["Command Line", "Computer Architecture"],
            "languages": ["C", "Assembly"],
            "description": "Command Line application that converted assembly language files from a provided Instruction Set Architecture into object files, linked those object files together, and simulated the output of the resulting executable."
        },
        {
            "name": "Autonomous Robotics Intro Projects",
            "key": "ar",
            "category": "School",
            "tags": ["Motion Planning", "Autonomous Robotics", "Kinematics"],
            "languages": ["Javascript"],
            "description": "Various robotics projects using a simulated robot: Implemented an A-Star path planning algorithm in a 2D simulator and a RRT-Connect path planning algorithm with collision detection in a 3D simulator; Controlled the motion of a 3D simulated robotic arm using both forward and inverse kinematics; Implemented a PID controller with Euler and Velocity Verlet integrators to control a pendulum."
        },
        {
            "name": "Crabster Exam Server",
            "key": "cs",
            "category": "Professional",
            "tags": ["Featured", "Frontend", "Backend","Web Development"],
            "languages": ["HTML", "CSS", "Javascript", "Python", "Swift"],
            "description": "Randomized exam server used to administer exams to 2500+ students and 3+ classes per semester. Built endpoints for the server-side using both Python and Swift and worked on the client-side application using React."
        },
        {
            "name": "Computer Security Projects",
            "key": "cp",
            "category": "School",
            "tags": ["Security"],
            "languages": ["Go", "Python", "HTML"],
            "description": "Various computer security projects: Cryptography - implemented a length extension attack, padding oracle attack, and a program to forge RSA signatures; Web Security - implemented a SQL injection attack and a CSRF attack; Networking - implemented a Man in the Middle Attack; Application Security - Implemented a buffer overflow attack"
        },
        {
            "name": "Housing Price Prediction",
            "key": "hp",
            "category": "School",
            "tags": ["Machine Learning"],
            "languages": ["R"],
            "description": "Used multiple machine learning techniques to build a model that predicted the price of a particular house in Ames, Iowa given predictor variables. These models included linear regression, neural networks, k-nearest neighbor, regression tree, svm, and random forest, and a model that stacked them all together. The Mean Absolute Error of this model was $10874 per house and the Mean Squared Error was $6384"
        },
        {
            "name": "Image Resizer",
            "key": "ir",
            "category": "School",
            "tags": ["Command Line","Computer Vision", "Data Structures"],
            "languages": ["C++"],
            "description": "Command Line application that used a seam-carving algorithm to resize images in a .ppm format."
        },
        {
            "name": "Kernel Fragments",
            "key": "tl",
            "category": "School",
            "tags": ["Operating Systems"],
            "languages": ["C++"],
            "description": "Implemented portions of an Operating System Kernel: A Thread Library, which included implementations for thread, cpu, mutex, and cv; A Memory Manager which managed the virtual memory of processes; A Network File Server which allowed users to perform CRUD operations on their files."
        },
        {
            "name": "Mars Rover AR Tag Detector",
            "key": "mr",
            "category": "Personal",
            "tags": ["Featured","Neural Net","Autonomous Robotics"],
            "languages": ["C++", "Python"],
            "description": "Working on the Michigan Mars Rover Team to build an autonomous rover. More specifically, I am working on the perception sub-team. Trained a Convolutional Neural Network in order to create a more robust fiducial marker detection system than the default OpenCV method. Used PyTorch to train the network and torchvision to port the CNN onto the rover."
        },
        {
            "name": "Michigan Ticket App",
            "key": "mt",
            "category": "Personal",
            "tags": ["Mobile","Frontend"],
            "languages": ["Java"],
            "description": "Mobile application designed at the University of Michigan Hackathon to allow students to buy and sell their student football tickets. Built using Android Studio."
        },
        {
            "name": "MNIST Classifier",
            "key": "mc",
            "category": "Personal",
            "tags": ["Neural Net", "Command Line", "Computer Vision"],
            "languages": ["C++"],
            "description": "Single Layer Perceptron used to classify handwritten digits in the MNIST database. Current Accuracy of the classifier is 91%."
        },
        {
            "name": "Multi Attribute Recognition on the CompCars Dataset",
            "key": "ma",
            "category": "School",
            "tags": ["Featured", "Neural Net", "Computer Vision"],
            "languages": ["Python"],
            "description": "Implemented a ResNet with a custom designed loss function to concurrently recognize multiple attributes on the CompCars dataset (images of cars). The discrete attribute the network predicted was type classification and the continuous attribute was maximum speed."
        },
        {
            "name": "Piazza Post Classifier",
            "key": "pc",
            "category": "School",
            "tags": ["Machine Learning", "Data Structures", "Command Line"],
            "languages": ["C++"],
            "description": "Trained classifier that uses a log-score algorithm to assign labels to the content of a piazza post."
        },
        {
            "name": "Portfolio Website",
            "key": "pw",
            "category": "Personal",
            "tags": ["Featured", "Frontend", "Web Development"],
            "languages": ["HTML", "CSS", "Javascript"],
            "description": "You're looking at it! Static website built using React."
        },
        {
            "name": "SillyQL",
            "key": "sq",
            "category": "School",
            "tags": ["Data Structures", "Command Line", "Databases"],
            "languages": ["C++"],
            "description": "Implementation of a simplified SQL. Includes the ability to CREATE, INSERT, PRINT, DELETE, DROP TABLE, GENERATE INDEX, and JOIN."
        },
        {
            "name": "Stock Market Simulator",
            "key": "sm",
            "category": "School",
            "tags": ["Command Line", "Data Structures"],
            "languages": ["C++"],
            "description": "Simulator that given timestamps, buy, and sell orders matches buyers to sellers and tracks the median purchase price of each stock."
        },
        {
            "name": "Voluntutors",
            "key": "vt",
            "category": "Personal",
            "tags": ["Frontend","Web Development", "Mobile"],
            "languages": ["HTML", "CSS", "Javascript"],
            "description": "Web application for connecting volunteer tutors with schools/parents/students in low-income neighborhoods. Worked on styling the frontend of the mobile website."
        }
    ]
}